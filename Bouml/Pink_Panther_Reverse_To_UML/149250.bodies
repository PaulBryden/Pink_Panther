class TargetNode
!!!171906.cpp!!!	updateKalmanRSSI() : void

    m_Kalman_RSSI_Val = m_Kalman_rssi.kalmanUpdate(this->getRSSI());
!!!172034.cpp!!!	ParseJson(in node : web::json::value) : void

    boost::mutex::scoped_lock lock(g_i_mutex);
    m_Node = std::make_shared<Node>(node);
    try
    {
        m_XCoord = node["x"].as_double();
        cout << node["x"];
    } catch (std::exception e)
    {
        printf("Error:: Cannot parse XCoord from JSON. Please check Syntax");
        std::exception ParseError;
        throw (ParseError);
    }
    try
    {
        m_YCoord = node["y"].as_double();
        cout << node["y"];
    } catch (std::exception e)
    {
        printf("Error:: Cannot parse YCoord from JSON. Please check Syntax");
        std::exception ParseError;
        throw (ParseError);
    }
    try
    {
        m_ZCoord = node["z"].as_double();
        cout << node["z"];
    } catch (std::exception e)
    {
        printf("Error:: Cannot parse ZCoord from JSON. Please check Syntax");
        std::exception ParseError;
        throw (ParseError);
    }
    try
    {
        m_rssi_cal = node["cal"].as_integer();
        cout << node["cal"];
    } catch (std::exception e)
    {
        printf("Error:: Cannot parse RSSICalib from JSON. Please check Syntax");
        std::exception ParseError;
        throw (ParseError);
    }

!!!172290.cpp!!!	TargetNode(in node : web::json::value)
    this->ParseJson(node);

!!!172418.cpp!!!	TargetNode(in node : web::json::value, in calibrationParam : double, in Q : double, in R : double)
    this->ParseJson(node);
!!!172546.cpp!!!	ToJson() : web::json::value
    using namespace web;
    json::value response = m_Node->ToJson();

    response["XCoord"] = json::value::number(m_XCoord);
    response["YCoord"] = json::value::number(m_YCoord);
    response["ZCoord"] = json::value::number(m_ZCoord);
    response["RSSICalib"] = json::value::number(m_rssi_cal);
    response["Distance"] = json::value::number(GetDistance());
    response["RSSIFiltered"] = json::value::number(m_Kalman_RSSI_Val);

    return response;


!!!172674.cpp!!!	Update(in Node : std::shared_ptr<INode>) : void

    boost::mutex::scoped_lock lock(g_i_mutex);
    m_Node = Node;
    updateKalmanRSSI();
!!!172802.cpp!!!	getRSSI() : int

    return m_Node->getRSSI();
!!!172930.cpp!!!	getSSID() : std::string

    return m_Node->getSSID();
!!!173058.cpp!!!	getXCoord() : double
    return m_XCoord;
!!!173186.cpp!!!	getYCoord() : double
    return m_YCoord;
!!!173314.cpp!!!	getZCoord() : double
    return m_ZCoord;
!!!173442.cpp!!!	GetDistance() : double

    try
    {
        double Power = (-(static_cast<double>(m_Kalman_RSSI_Val - (m_rssi_cal)) / (10.0 * 2.35)));

        printf("Calculating Distance: %f", pow(10.0, Power));

        return pow(10.0, Power);
    } catch (std::exception X)
    {
        printf("Error:: No Calibration Data Available");
        return 0;
    }
!!!173570.cpp!!!	setRecentlyUpdated(in status : bool) : void
    m_Node->setRecentlyUpdated(status);
!!!173698.cpp!!!	getRecentlyUpdated() : bool
    m_Node->getRecentlyUpdated();
!!!173826.cpp!!!	getMAC() : std::string
    return m_Node->getMAC();
